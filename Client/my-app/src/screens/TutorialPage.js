import React from 'react';
import './TutorialPage.css'; // Archivo CSS que ya tienes
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
const TutorialPage = () => {
    return (
        <div className="tutorial-page">
            {/* Contenido principal */}
            <main className="tutorial-main">
                <div className="tutorial-container">

                    {/* T√≠tulo General */}
                    <header className="tutorial-header">
                        <h1 className="tutorial-title">Tutorial y Ejemplos de Ejecuci√≥n</h1>
                        <p className="tutorial-subtitle">
                            Aprende a usar Performance System para medir y analizar el rendimiento de tu c√≥digo C++
                        </p>
                    </header>

                    {/* Secci√≥n: Flujo General del Sistema */}
                    <section className="tutorial-section">
                        <div className="section-card">
                            <h2 className="section-title">Flujo General del Sistema</h2>
                            <div className="section-content">
                                <p>
                                    üì• <strong>Subir archivo .zip:</strong> El usuario sube un archivo comprimido que contiene uno o m√°s archivos <code>.cpp</code>.
                                </p>
                                <div className="image-wrapper">
                                    <img
                                        src="/tutorial-images/zip.PNG"
                                        alt="Subida de archivo a la plataforma"
                                        style={{ maxWidth: "30%", borderRadius: "8px", boxShadow: "0 4px 20px rgba(0,0,0,0.1)" }}
                                    />
                                </div>

                                <p>
                                    ‚öôÔ∏è <strong>Configuraci√≥n del test:</strong> Debes seleccionar el tipo de test que deseas realizar (por ejemplo, LCS, CAMM o SIZE). Adem√°s, debes definir el <strong>Max Input Size</strong> y las repeticiones por incremento.
                                </p>
                                <div className="image-wrapper">
                                    <img
                                        src="/tutorial-images/configuracion_de_test.PNG"
                                        alt="Configuraci√≥n de test"
                                        style={{ maxWidth: "30%", borderRadius: "8px", boxShadow: "0 4px 20px rgba(0,0,0,0.1)" }}
                                    />
                                </div>

                                <p>
                                    ‚ö° <strong>Compilaci√≥n y env√≠o:</strong> El backend compila autom√°ticamente cada archivo y lo env√≠a a la red de m√°quinas medidoras (slaves).
                                </p>

                                <p>
                                    üß™ <strong>Ejecuci√≥n y medici√≥n:</strong> Cada slave mide consumo energ√©tico, instrucciones, ciclos de CPU, tiempos y otros par√°metros usando <code>perf</code>.
                                </p>
                                <div className="image-wrapper">
                                    <img
                                        src="/tutorial-images/test-realizado.PNG"
                                        alt="Test realizado"
                                        style={{ maxWidth: "30%", borderRadius: "8px", boxShadow: "0 4px 20px rgba(0,0,0,0.1)" }}
                                    />
                                </div>

                                <p>
                                    üìä <strong>Resultados:</strong> Los resultados se visualizan en gr√°ficos interactivos y se pueden descargar como CSV.
                                </p>
                                <div className="image-wrapper">
                                    <img
                                        src="/tutorial-images/visualizacion-de-resultados.PNG"
                                        alt="Visualizaci√≥n de resultados"
                                        style={{ maxWidth: "30%", borderRadius: "8px", boxShadow: "0 4px 20px rgba(0,0,0,0.1)" }}
                                    />
                                </div>
                            </div>
                        </div>
                    </section>

                    {/* Secci√≥n: Test LCS */}
                    <section className="tutorial-section">
                        <div className="section-card">
                            <h2 className="section-title">Test LCS (Longest Common Subsequence)</h2>
                            <div className="section-content">
                                <div className="subsection">
                                    <h3 className="subsection-title">¬øQu√© es el Test LCS?</h3>
                                    <p>
                                        Este ejemplo corresponde a un test de tipo LCS (Text Input) que mide el rendimiento de un algoritmo que busca la Subcadena Com√∫n M√°s Larga entre dos mitades de un texto. Tu programa ser√° evaluado midiendo m√©tricas de rendimiento como instrucciones ejecutadas, fallos y aciertos de cach√©, ciclos de CPU y tiempo total de ejecuci√≥n.                                   </p>
                                </div>
                            </div>
                            <div className="subsection">
                                <h3 className="subsection-title">Recomendaciones</h3>
                                <ul>
                                    <li>Optimizar la implementaci√≥n para minimizar el uso de memoria y CPU.</li>
                                    <li>Subir siempre un archivo <code>.cpp</code> compilable.</li>
                                    <li>No utilizar <code>cin</code> ni <code>getline</code> para leer por teclado. Usa siempre argumentos o archivos.</li>
                                    <li>El archivo de texto usado es <code>input/english.50MB</code> y ser√° pasado autom√°ticamente como argumento.</li>
                                </ul>
                            </div>
                            <div className="subsection">
                                <h3 className="subsection-title">Ejemplo de C√≥digo</h3>
                                <div className="code-placeholder">
                                    <SyntaxHighlighter language="cpp" style={oneDark} showLineNumbers>
                                        {`
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
using namespace std;

string longest_common_substring(const string& str1, const string& str2) {
    int n = str1.length();
    int m = str2.length();
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
    int maxlen = 0;
    int end = 0;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                if (dp[i][j] > maxlen) {
                    maxlen = dp[i][j];
                    end = i - 1;
                }
            }
        }
    }

    if (maxlen == 0) return "<empty>";
    return str1.substr(end - maxlen + 1, maxlen);
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        cerr << "Uso: ./a.out <archivo_input>" << endl;
        return 1;
    }

    ifstream file(argv[1]);
    if (!file.is_open()) {
        cerr << "No se pudo abrir el archivo" << endl;
        return 1;
    }

    string content((istreambuf_iterator<char>(file)), (istreambuf_iterator<char>()));
    file.close();

    int mid = content.size() / 2;
    string first_half = content.substr(0, mid);
    string second_half = content.substr(mid);

    string lcs = longest_common_substring(first_half, second_half);

    cout << "LCS length: " << lcs.length() << endl;
    return 0;
}`}
                                    </SyntaxHighlighter>
                                </div>
                            </div>
                        </div>
                    </section>

                    {/* Secci√≥n: Test CAMM */}
                    <section className="tutorial-section">
                        <div className="section-card">
                            <h2 className="section-title">Test CAMM (Cache-Aware Matrix Multiplication)</h2>
                            <div className="section-content">
                                <div className="subsection">
                                    <h3 className="subsection-title">¬øQu√© es el Test CAMM?</h3>
                                    <p>
                                        El test CAMM mide el rendimiento en la multiplicaci√≥n de matrices usando entrada num√©rica, con variantes de datos aleatorios, iguales o semi-ordenados. Permite evaluar el comportamiento del cache y la eficiencia en operaciones num√©ricas. El backend selecciona autom√°ticamente el archivo de entrada seg√∫n la opci√≥n elegida (CAMM, CAMMS o CAMMSO). No es necesario modificar el c√≥digo para manejar el input.
                                    </p>
                                </div>
                                <div className="subsection">
                                    <h3 className="subsection-title">Recomendaciones</h3>
                                    <ul>
                                        <li>Verificar siempre la consistencia de las dimensiones antes de ejecutar.</li>
                                        <li>El c√≥digo debe recibir los datos como argumentos (<code>argv</code>), no desde teclado.</li>
                                        <li>Confirma que tu l√≥gica de parsing respete el formato: matriz A linealizada seguida de matriz B linealizada.</li>
                                        <li>No necesitas preocuparte de cargar archivos manualmente; el sistema lo gestiona.</li>
                                    </ul>

                                </div>
                                <div className="subsection">
                                    <h3 className="subsection-title">Ejemplo de C√≥digo</h3>
                                    <div className="code-placeholder">
                                        <SyntaxHighlighter language="cpp" style={oneDark} showLineNumbers>
                                            {`
#include <iostream>
#include <vector>
#include <cmath>
#include <sstream>
#include <string>

#define BLOCK_SIZE 32 

void multiply(const std::vector<std::vector<double>>& A,
              const std::vector<std::vector<double>>& B,
              std::vector<std::vector<double>>& C) 
{
    int size = A.size();
    for (int i = 0; i < size; i += BLOCK_SIZE) {
        for (int j = 0; j < size; j += BLOCK_SIZE) {
            for (int k = 0; k < size; k += BLOCK_SIZE) {
                for (int ii = i; ii < i + BLOCK_SIZE && ii < size; ii++) {
                    for (int jj = j; jj < j + BLOCK_SIZE && jj < size; jj++) {
                        for (int kk = k; kk < k + BLOCK_SIZE && kk < size; kk++) {
                            C[ii][jj] += A[ii][kk] * B[kk][jj];
                        }
                    }
                }
            }
        }
    }
}

int main(int argc, char* argv[]) {
    std::vector<double> inputValues;

    for (int i = 1; i < argc; ++i) {
        std::stringstream ss(argv[i]);
        double value;
        while (ss >> value) {
            inputValues.push_back(value);
        }
    }

    int size = static_cast<int>(std::sqrt(inputValues.size() / 2));

    std::vector<std::vector<double>> A(size, std::vector<double>(size));
    std::vector<std::vector<double>> B(size, std::vector<double>(size));
    std::vector<std::vector<double>> C(size, std::vector<double>(size, 0.0));

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            A[i][j] = inputValues[i * size + j];
            B[i][j] = inputValues[(size * size) + (i * size + j)];
        }
    }

    multiply(A, B, C);

    return 0;
}
                              `}
                                        </SyntaxHighlighter>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>

                    {/* Secci√≥n: Test SIZE */}
                    <section className="tutorial-section">
                        <div className="section-card">
                            <h2 className="section-title">Test SIZE (Incremental Input Test)</h2>
                            <div className="section-content">
                                <div className="subsection">
                                    <h3 className="subsection-title">¬øQu√© es el Test SIZE?</h3>
                                    <p>
                                        El test SIZE eval√∫a el rendimiento del algoritmo al incrementar progresivamente el tama√±o de entrada. Su objetivo es analizar la escalabilidad y la estabilidad del c√≥digo cuando se enfrenta a entradas cada vez mayores.
                                        Durante la prueba se registran m√©tricas como instrucciones ejecutadas, ciclos de CPU, uso de cach√© y duraci√≥n total de la ejecuci√≥n. Este test es ideal para identificar cuellos de botella y medir el impacto de optimizaciones en escenarios que simulan cargas crecientes.
                                    </p>
                                </div>
                                <div className="subsection">
                                    <h3 className="subsection-title">Recomendaciones</h3>
                                    <ul>
                                        <li>Optimizar la implementaci√≥n para que no se degrade significativamente con entradas grandes.</li>
                                        <li>Subir siempre un archivo <code>.cpp</code> compilable.</li>
                                        <li>No utilizar <code>cin</code> ni <code>getline</code> para leer por teclado. Usa siempre argumentos.</li>
                                        <li>Validar el tama√±o m√°ximo de entrada para evitar tiempos de ejecuci√≥n excesivos o errores inesperados.</li>
                                    </ul>
                                </div>
                                <div className="subsection">
                                    <h3 className="subsection-title">Ejemplo de C√≥digo</h3>
                                    <div className="code-placeholder">
                                        <SyntaxHighlighter language="cpp" style={oneDark} showLineNumbers>
                                            {`
#include <iostream>
#include <cstdlib>

// Funci√≥n recursiva para calcular Fibonacci
long long recursiveFibonacci(int n) {
    if (n <= 1) return n;
    return recursiveFibonacci(n - 1) + recursiveFibonacci(n - 2);
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << "Uso: ./a.out <tama√±o_input>" << std::endl;
        return 1;
    }

    int num = std::atoi(argv[1]);
    recursiveFibonacci(num);

    std::cout << "Fibonacci calculado para n = " << num << std::endl;
    return 0;
}
                        `}
                                        </SyntaxHighlighter>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>


                    {/* Secci√≥n: M√©tricas y Gr√°ficos */}
                    <section className="tutorial-section">
                        <div className="section-card">
                            <h2 className="section-title">Comprensi√≥n de M√©tricas y Gr√°ficos</h2>
                            <div className="section-content">
                                <div className="subsection">
                                    <h3 className="subsection-title">Tipos de M√©tricas</h3>
                                    <p>
                                        A continuaci√≥n se explican las principales m√©tricas utilizadas para evaluar el rendimiento de tu c√≥digo:
                                    </p>
                                    <ul>
                                        <li><strong>Instructions:</strong> N√∫mero total de instrucciones ejecutadas. Relacionado con la eficiencia general del c√≥digo.</li>
                                        <li><strong>CpuCycles:</strong> Ciclos totales de CPU usados. Indica uso intensivo del procesador.</li>
                                        <li><strong>TaskClock:</strong> Tiempo de ejecuci√≥n del proceso en milisegundos.</li>
                                        <li><strong>CpuClock:</strong> Tiempo total de CPU consumido.</li>
                                        <li><strong>Branches:</strong> N√∫mero de bifurcaciones (branches) ejecutadas.</li>
                                        <li><strong>BranchMisses:</strong> Fallos en predicci√≥n de branches. Afecta rendimiento.</li>
                                        <li><strong>LLCLoads:</strong> Lecturas desde el √∫ltimo nivel de cach√© (LLC).</li>
                                        <li><strong>LLCLoadMisses:</strong> Fallos al leer desde LLC.</li>
                                        <li><strong>LLCStores:</strong> Escrituras en LLC.</li>
                                        <li><strong>LLCStoreMisses:</strong> Fallos al escribir en LLC.</li>
                                        <li><strong>L1DcacheLoads:</strong> Lecturas desde cach√© L1 de datos.</li>
                                        <li><strong>L1DcacheLoadMisses:</strong> Fallos al leer desde cach√© L1.</li>
                                        <li><strong>L1DcacheStores:</strong> Escrituras en cach√© L1.</li>
                                        <li><strong>CacheReferences:</strong> Referencias totales a cualquier nivel de cach√©.</li>
                                        <li><strong>CacheMisses:</strong> Fallos generales de cach√©.</li>
                                        <li><strong>PageFaults:</strong> Fallas de p√°gina. Indican acceso a memoria que no estaba en RAM.</li>
                                        <li><strong>MajorFaults:</strong> Fallas mayores que requieren cargar datos desde disco.</li>
                                        <li><strong>EnergyPkg:</strong> Energ√≠a consumida por el paquete completo del CPU (package).</li>
                                        <li><strong>EnergyCores:</strong> Energ√≠a consumida espec√≠ficamente por los n√∫cleos del CPU.</li>
                                        <li><strong>EnergyRAM:</strong> Energ√≠a consumida por la memoria RAM.</li>
                                        <li><strong>StartTime:</strong> Hora de inicio de la ejecuci√≥n.</li>
                                        <li><strong>EndTime:</strong> Hora de fin de la ejecuci√≥n.</li>
                                        <li><strong>DurationTime:</strong> Duraci√≥n total de la ejecuci√≥n en milisegundos.</li>
                                    </ul>
                                    <p>
                                        üìà Estas m√©tricas te permiten analizar el comportamiento detallado de tu algoritmo, identificar cuellos de botella y optimizar el rendimiento general.
                                    </p>
                                </div>
                                <div className="subsection">
                                    <h3 className="subsection-title">Ejemplos de Gr√°ficos</h3>
                                    <div className="image-placeholder">
                                        <div className="image-wrapper">
                                            <img
                                                src="/tutorial-images/ejemplo_grafico.PNG"
                                                alt="Visualizaci√≥n de resultados"
                                                style={{ maxWidth: "100%", borderRadius: "8px", boxShadow: "0 4px 20px rgba(0,0,0,0.1)" }}
                                            /></div>
                                        <div className="image-wrapper">
                                            <img
                                                src="/tutorial-images/ejemplo_grafico2.PNG"
                                                alt="Visualizaci√≥n de resultados"
                                                style={{ maxWidth: "100%", borderRadius: "8px", boxShadow: "0 4px 20px rgba(0,0,0,0.1)" }}
                                            /></div>
                                        <div className="image-wrapper">
                                            <img
                                                src="/tutorial-images/ejemplo_grafico3.PNG"
                                                alt="Visualizaci√≥n de resultados"
                                                style={{ maxWidth: "100%", borderRadius: "8px", boxShadow: "0 4px 20px rgba(0,0,0,0.1)" }}
                                            /></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>

                </div>
            </main >

            {/* Footer opcional */}
            < footer className="tutorial-footer" >
                <div className="footer-container">
                    <p>&copy; 2024 Performance System - Tutorial y Documentaci√≥n</p>
                </div>
            </footer >
        </div >
    );
};

export default TutorialPage;
